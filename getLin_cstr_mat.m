load CostMat

% u = [del_s; del_b]
U_cstr = [eye(2); -eye(2)];
U_cstr_b = 15*ones(4,1);%0.25*ones(4,1);

% x = [     z_dot;  theta_dot;  theta;  z]
X_cstr = [  0       0           1       0;...
            0       0           -1      0;...
            ...
            0       15          2       0;...
            0       15          -2      0;...
            0       -15         2       0;...
            0       -15         -2      0;...
            ...
            1       0           0       0;...
            -1      0           0       0;...
            ...
            0       0           0       1;...
            0       0           0       -1];

X_cstr_b = [15;15;... 0.25;0.25;...
            45;45;45;45;...0.5;0.5;0.5;0.5;...
            10;10;...
            10;10];
        
        
%% Create monstermatrices

load System.mat


cstr.U_cstr = kron(eye(dim.N), U_cstr);
cstr.U_cstr_b = repmat(U_cstr_b, dim.N, 1);
cstr.X_cstr = kron(eye(dim.N+1), X_cstr);
cstr.X_cstr_b = repmat(X_cstr_b, dim.N+1, 1);
cstr.U_cstr1 = U_cstr;
cstr.U_cstr_b1 = U_cstr_b;
cstr.X_cstr1 = X_cstr;
cstr.X_cstr_b1 = X_cstr_b;

%% Terminal Set
      
[set, c, V] = TerminalSet(K, P, cstr)        

% x = [     z_dot;  theta_dot;  theta;  z]
% Xf_cstr = [ 0       0           0       1;...
%             0       0           0       -1;...
%             ...
%             1       0           0       0;...
%             -1      0           0       0;...
%             ...
%             0       0           1       0;...
%             0       0           -1      0;...
%             ...
%             0       1           0       0;...
%             0       -1          0       0];

Xf_cstr = [V(1,1)/norm(V(:,1)), V(2,1)/norm(V(:,1)), V(3,1)/norm(V(:,1)), V(4,1)/norm(V(:,1)); ...
           -V(1,1)/norm(V(:,1)), -V(2,1)/norm(V(:,1)), -V(3,1)/norm(V(:,1)), -V(4,1)/norm(V(:,1)); ...
           ... 
           V(1,2)/norm(V(:,2)), V(2,2)/norm(V(:,2)), V(3,2)/norm(V(:,2)), V(4,2)/norm(V(:,2)); ...
           -V(1,2)/norm(V(:,2)), -V(2,2)/norm(V(:,2)), -V(3,2)/norm(V(:,2)), -V(4,2)/norm(V(:,2)); ...
           ...
           V(1,3)/norm(V(:,3)), V(2,3)/norm(V(:,3)), V(3,3)/norm(V(:,3)), V(4,3)/norm(V(:,3)); ...
           -V(1,3)/norm(V(:,3)), -V(2,3)/norm(V(:,3)), -V(3,3)/norm(V(:,3)), -V(4,3)/norm(V(:,3)); ...
           ...
           V(1,4)/norm(V(:,4)), V(2,4)/norm(V(:,4)), V(3,4)/norm(V(:,4)), V(4,4)/norm(V(:,4)); ...
           -V(1,4)/norm(V(:,4)), -V(2,4)/norm(V(:,4)), -V(3,4)/norm(V(:,4)), -V(4,4)/norm(V(:,4)); ...
           ]

Xf_cstr_b = [-c*norm(V(:,1)); -c*norm(V(:,1));...
             ... 
             -c*norm(V(:,2)); -c*norm(V(:,2));...
             ...
             -c*norm(V(:,3)); -c*norm(V(:,3));...
             ...
             -c*norm(V(:,4)); -c*norm(V(:,4));...
             ];

Xf_cstr_b = -Xf_cstr_b
% Xf_cstr_b=[ 0.1;0.1;...
%             0.1;0.1;...
%             0.15;0.15;...
%             0.05;0.05];

cstr.Xf_cstr = Xf_cstr;
cstr.Xf_cstr_b = Xf_cstr_b;



save cstrMat.mat cstr

